#+TITLE: Todo

* TODO Get typed onClicks working

* TODO Display users from JSON api

* TODO Events are only applied to the component they come from

* TODO Show server time and keep it updated

So for applying this, I think we need to pass in a way
so that apply can say re-render me.  This might actually
be kind of elegant?  It can be the same as an event from
then frontend.

An idea: what if handlers are split between pure and impure
handlers?

For now let's just have a button send the event

** DONE Display it on button click (and update each click)
** Clean up apply
** Now how to get it ticking?
could do something like onChange -> effect
or onChange -> event

there's definitely a need to send events based on changes, or once

maybe that'll be my answer to react's useEffect, since effects are in
effectHandlers, we just need to send an event

** How to get events "hoisted" up to higher event handlers?
Is that something that even matters with this?  What's a good example hm.
Say you add something a cart and want the cart to close.
That'd be a case for the GlobalMessageHandler I think.
Or like, some kind of pub/sub.

* DONE Increment and decrement
I have the JSON

But how do I turn that into what's needed to cast / apply the action?

Possibly move parsing the JSON into the message handler

Remember that you will be targeting these messages to specific
components, not applying them to the whole tree.  I think.

** DONE Change state on message received
** DONE Put the right message in the on click
** DONE State is passed into the handler

* Components can send events to themselves

* DONE Applying events to components / nested components
For now, I'm just gonna apply the event to every gd widget.

Once that's done and working, tag it as the very first,
barely working version.

* Developer experience
** See messages the server is receiving and sending
** Send a message from the repl
** See state from the repl
** There may be a way to get hot reloading faster
Seems kind of like it takes a moment for firefox to realize that the
websocket connect has been severed, maybe send a message from the server
to the frontend to retry connecting with a tiny delay?  Freakishly fast
hot reloading seems in grasp

* Building a weather forecast display
This will shake out how to use an API,
https://api.weather.gov/gridpoints/TOP/31,80/forecast

This will also figure out how components can send events
to themselves hmm.

handler :: Chan -> State -> m State ?
render :: State -> m Html ?

I super wanna avoid prescribing the "m"

user provided run function?

* Building a registration form
This will help provide the building blocks for the checkout

** Sending messages on blur
** Handling a form submit

* Localize the registration form
Shake out a way of doing localization, the initial request
should be passing in the url and putting it into some state so that we
can do "localhost:8001/en-US" / "localhost:8001/es-MX" etc, put it into
a partially applied fn (getTranslation :: Locale -> String -> String),
put into an across-all-components monad (maybe?)

* Building a checkout
It should be possible to build a fully functioning, complicated checkout
process with this library.  Google maps for address autocomplete, stripe
for the payment processor.

* Thoughts on event / state locality
I'm a fan of the idea that there's only ever one handler for events

We could collect all the handlers, and then run the event through all
(I think this is what redux does internally), but is that good?
